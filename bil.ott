embed
{{ coq
Require Import String.
Require Import bbv.Word.
}}

indexvar index, m, n ::= {{ com subscripts}}
                         {{ coq nat }} {{ coq-equality }}
metavar id ::= {{ com a literal for variable}}
               {{ coq string }} {{ coq-equality exact string_dec. }}
metavar num  ::= {{ com number literal }}
                 {{ coq nat }} {{ coq-equality }}
metavar string,str ::= {{ com quoted string literal }}
                       {{ coq string }}
                       {{ coq-equality exact string_dec. }}



grammar


 insn :: insn_ ::=
   | { addr = w1 ; size = w2; code = bil }      ::      :: insn

 bil,seq :: seq_ ::=
   | { s1 ; .. ; sn }                           :: S    :: many
   {{coq ([[s1 .. sn]])}}

 stmt,s :: stmt_ ::=
   | var := exp                                 ::      :: move
   {{ com -- assign $exp$ to $var$  }}
   | jmp e                                      ::      :: jump
   {{ com -- transfer control to a given address $e$ }}
   | cpuexn ( num )                             ::      :: cpuexn
   {{ com -- interrupt CPU with a given interrupt $num$ }}
   | special ( string )                         ::      :: special
   {{ com -- instruction with unknown semantics  }}
   | while ( exp ) seq                          ::      :: while
   {{ com -- eval $seq$ while $exp$ is true }}
   | if ( e ) seq                               ::      :: ifthen
   {{ com -- eval $seq$ if $e$ is true }}
   | if ( e ) seq1 else seq2                    ::      :: if
   {{ com -- if $e$ is true then eval $seq_1$ else $seq_2$ }}


 exp,e :: exp_ ::=
   | ( exp )                                    :: S    :: paren
   {{coq ([[exp]])}}
   | var                                        ::      :: var
   {{ com -- a variable }}
   | word                                       ::      :: int
   {{ com -- an immediate value }}
   | e1 [ e2 , endian ] : nat                   ::      :: load
   {{ com -- load a value from address $e_2$ at storage $e_1$}}
   | e1 with [ e2 , endian ] : nat <- e3        ::      :: store
   {{ com -- update a storage $e_1$ with binding $e_2$ $\leftarrow$ $e_3$ }}
   | e1 bop e2                                  ::      :: binop
   {{ com -- perform binary operation on $e_1$ and $e_2$}}
   | e1 cop e2                                  ::      :: cmpop
   {{ com -- perform binary comparison on $e_1$ and $e_2$}}
   | e1 sop e2                                  ::      :: shiftop
   {{ com -- perform binary shift on $e_1$ by $e_2$}}
   | uop e1                                     ::      :: unop
   {{ com -- perform an unary operation on $e_1$}}
   | cast : nat [ e ]                           ::      :: cast
   {{ com -- extract or extend bitvector $e$ }}
   | let var = e1 in e2                         ::      :: let
   {{ com -- bind $e_1$ to $var$ in expression $e_2$}}
   | unknown [ string ] : type                  ::      :: unk
   {{ com -- unknown or undefined value of a given $type$ }}
   | if e1 then e2 else e3                      ::      :: ite
   {{ com -- evaluates to $e_2$ if $e_1$ is true else to $e_3$ }}
   | extract : nat1 : nat2 [ e ]                ::      :: ext
   {{ com -- extract or extend bitvector $e$}}
   | e1 @ e2                                    ::      :: concat
   {{ com -- concatenate two bitvector $e_1$ to $e_2$ }}
   | [ e1 / var ] e2                              :: M :: subst
   {{ com -- the (capture avoiding) substitution of $e_1$ for $var$ in $e_2$ }}
   {{ coq (subst [[e1]] [[var]] [[e2]])}}

 var :: var_ ::=
   | id : type                                 ::      :: var

 val,v :: val_ ::=
   | word                                      ::      :: imm
   | v1 with [ v2 , endian ] : nat <- v3       ::      :: mem
   | unknown [ string ] : type                 ::      :: bot

 word,w :: word_ ::=
   | num : nat                                 ::     :: word
   | ( w )                                        :: S    :: paren
   {{ coq ([[w]])}}
   | 1 : nat                                   :: S    :: one
   {{ coq (wone [[nat]]) }}
   | true                                       :: S    :: true
   {{ com -- sugar for 1:1 }}
   {{ coq (wone 1) }}
   | false                                      :: S    :: false
   {{ com -- sugar for 0:1 }}
   {{ coq (wzero 1) }}
   | w1 .+ w2                                   :: S    :: plus
        {{ tex [[w1]] \stackrel{bv} + [[w2]] }}
        {{ com -- plus }}
        {{ coq ([[w1]] ^+ [[w2]]) }}
   | w1 .- w2                                   :: S    :: minus
        {{ tex [[w1]] \stackrel{bv} - [[w2]] }}
        {{ com -- minus }}
        {{ coq ([[w1]] ^- [[w2]]) }}
   | w1 .* w2                                   :: S    :: times
        {{ tex [[w1]] \stackrel{bv} * [[w2]] }}
        {{ com -- times }}
        {{ coq ([[w1]] ^* [[w2]]) }}
   | w1 ./ w2                                   :: S    :: div
        {{ tex [[w1]] \stackrel{bv} / [[w2]] }}
        {{ com -- division }}
        {{ coq ([[w1]] ^/ [[w2]]) }}
   | w1 ./$ w2                                   :: S    :: sdiv
        {{ tex [[w1]] \stackrel{sbv} / [[w2]] }}
        {{ com -- signed division }}
        {{ coq (wdivZ _ [[w1]] [[w2]]) }}
   | w1 .% w2                                   :: S    :: mod
        {{ tex [[w1]] \stackrel{bv} \% [[w2]] }}
        {{ com -- modulo }}
        {{ coq ([[w1]] ^% [[w2]]) }}
   | w1 .%$ w2                                   :: S    :: smod
        {{ tex [[w1]] \stackrel{sbv} \% [[w2]] }}
        {{ com -- signed modulo }}
        {{ coq (wremZ _ [[w1]] [[w2]]) }}
   | w1 .<< w2                                   :: S    :: lsl
        {{ tex [[w1]] \stackrel{bv} \ll [[w2]] }}
        {{ com -- logical shift left }}
        {{ coq ([[w1]] ^<< [[w2]]) }}
   | w1 .>> w2                                   :: S    :: lsr
        {{ tex [[w1]] \stackrel{bv} \gg [[w2]] }}
        {{ com -- logical shift right }}
        {{ coq ([[w1]] ^>> [[w2]]) }}
   | w1 .~>> w2                                   :: S    :: asr
        {{ tex [[w1]] \stackrel{bv} \ggg [[w2]] }}
        {{ com -- arithmetic shift right }}
        {{ coq (wrshifta _ [[w1]] [[w2]]) }}
   | w1 .& w2                                   :: S    :: land
        {{ tex [[w1]] \stackrel{bv} \& [[w2]] }}
        {{ com -- bitwise and }}
        {{ coq ([[w1]] ^& [[w2]]) }}
   | w1 .| w2                                   :: S    :: lor
        {{ tex [[w1]] \stackrel{bv} | [[w2]] }}
        {{ com -- bitwise or }}
        {{ coq ([[w1]] ^| [[w2]]) }}
   | w1 .xor w2                                   :: S    :: xor
        {{ tex [[w1]] \stackrel{bv}{xor} [[w2]] }}
        {{ com -- bitwise xor }}
        {{ coq (wxor _ [[w1]] [[w2]]) }}
   | w1 .< w2                                   :: S    :: less
        {{ tex [[w1]] \stackrel{bv} < [[w2]] }}
        {{ com -- less than }}
        {{ coq ([[w1]] < [[w2]]) }}
   | w1 .<$ w2                                   :: S    :: signed_less
        {{ tex [[w1]] \stackrel{sbv} < [[w2]] }}
        {{ com -- signed less than }}
        {{ coq ([[w1]] <s [[w2]]) }}
   | w1 .@ w2                                   :: S    :: concat
        {{ tex [[w1]] \stackrel{bv} . [[w2]] }}
        {{ com -- concatenation }}
        {{ coq (combine _ [[w1]] _ [[w2]]) }}
   | ext word ~hi : sz1 ~lo : sz2           :: S    :: extend_extract
        {{ com -- extract/extend }}
        {{ coq (ext _ word hi lo _) }}
   | exts word ~hi : sz1 ~lo : sz2         :: S    :: extend_extract_signed
        {{ com -- signed extract/extend }}
        {{ coq (ext_signed _ word hi lo _) }}



 bop :: binop_ ::=
   | +                                          ::      :: plus  {{ com -- plus}}
   | -                                          ::      :: minus {{ com -- minus}}
   | *                                          ::      :: times {{ com -- times}}
   | /                                          ::      :: divide {{ com -- divide}}
   | /$                                         ::      :: sdivide {{ com -- signed divide}}
        {{ tex \stackrel{signed} / }}
   | %                                          ::      :: mod {{ com -- modulo }}
   | %$                                         ::      :: smod {{ com -- signed modulo }}
        {{ tex \stackrel{signed} \% }}
   | &                                          ::      :: and {{ com -- bitwise and }}
   | |                                          ::      :: or  {{ com -- bitwise or }}
   | xor                                        ::      :: xor {{ com -- bitwise xor }}

 sop :: shiftop_ ::=
   | '<<'                                       ::      :: lshift
        {{ com -- logical shift left }}
   | '>>'                                       ::      :: rshift
        {{ com -- logical shift right }}
   | '~>>'                                      ::      :: arshift
        {{ com -- arithmetic shift right}}

 cop :: cmpop_ ::=
   | =                                          ::      :: eq  {{ com -- equality }}
   | <>                                         ::      :: neq {{ com -- non-equality }}
   | <                                          ::      :: lt  {{ com -- less than }}
   | '<='                                       ::      :: le
        {{ tex \leq }} {{ com -- less than or equal}}
   | '<$'                                       ::      :: slt {{ com -- signed less than}}
        {{ tex \stackrel{signed} < }}
   | '<=$'                                      ::      :: sle
        {{ tex \stackrel{signed} \leq }} {{ com -- signed less than or equal }}

 uop :: unop_ ::=
   | -                                          ::      :: neg {{ com -- unary negation}}
   | ~                                          ::      :: not {{ com -- bitwise complement}}

 nat,sz :: nat_ ::=
   | 0                                          :: M    :: zero
   {{ coq 0 }}
   | 1                                          :: M    :: one
   {{ coq 1 }}
   | 8                                          :: M    :: byte
   {{ coq 8 }}
   | nat1 + nat2                                :: M    :: nat_plus
   {{ coq ([[nat1]] + [[nat2]]) }}
   | nat1 - nat2                                :: M    :: nat_minus
   {{ coq ([[nat1]] - [[nat2]]) }}
   | ( nat )                                    :: M    :: nat_paren
   {{ coq [[nat]]}}

 endian,ed :: endian_ ::=
   | el                                         ::      :: little {{ com -- little endian }}
   | be                                         ::      :: big    {{ com -- big endian }}

 cast :: cast_ ::=
   | low                                        ::      :: low {{ com -- extract lower bits }}
   | high                                       ::      :: high {{ com -- extract high bits}}
   | signed                                     ::      :: signed
   {{ com -- extend with sign bit}}
   | unsigned                                   ::      :: unsinged
   {{ com -- extend with zero}}

 type,t :: type_ ::=
   | imm < sz >                                 ::      :: imm
   {{ com -- immediate of size $sz$}}
   | mem < sz1 , sz2 >                          ::      :: mem
   {{ com -- memory with address size $sz_1$ and element size $sz_2$}}

 delta {{ tex \Delta}} :: delta_ ::=
   | []                                         ::      :: nil  {{ com -- empty }}
   | delta [ var <- val ]                       ::      :: cons {{ com -- extend }}

 gamma {{ tex \Gamma }}, G {{ tex \Gamma }} :: gamma_ ::=
   | []                                         ::      :: nil  {{ com -- empty }}
   | gamma , var                                ::      :: cons {{ com -- extend }}
   | [ var ]                                    :: S    :: singleton
   {{ com -- singleton list }}
   {{ coq (gamma_cons [[var]] gamma_nil) }}
   | ( G )                                      :: S    :: parens
   {{ coq ([[G]]) }}
   | dom( delta )                               :: M    :: dom_delta
   {{ tex \mathsf{dom}([[delta]])}}
   {{ com -- domain of a runtime binding context}}
   {{ coq (dom_delta [[delta]]) }}

formula :: formula_ ::=
 | judgement                ::   :: judgement
 | ( formula )              :: M :: paren {{ coq ([[formula]]) }}
 | v1 <> v2                 :: M :: exp_neq {{ coq ([[v1]] <> [[v2]]) }}
 | var1 <> var2             :: M :: exp_var {{ coq ([[var1]] <> [[var2]]) }}
 | nat1 > nat2              :: M :: nat_gt {{ coq ([[nat1]] > [[nat2]])}}
 | nat1 = nat2              :: M :: nat_eq {{ coq ([[nat1]] = [[nat2]])}}
 | nat1 >= nat2             :: M :: nat_ge {{ coq ([[nat1]] >= [[nat2]])}}
 | e1 :=def e2              :: M :: defines
     {{ tex [[e1]] \stackrel{\text{def} }{:=} [[e2]] }}
     {{ coq ([[e1]] = [[e2]]) }}
 | ( var , val ) isin delta   :: M :: in_env
   {{ coq ([[isin]] ([[var]],[[val]]) [[delta]]) }}
 | var notin dom ( delta )   :: M :: notin_env
   {{ tex [[var]] [[notin]] \mathsf{dom}([[delta]]) }}
   {{ coq ([[notin]] [[var]] (gamma_dom_delta [[delta]])) }}
 |  var isin gamma   :: M :: in_ctx
   {{ coq ([[isin]] [[var]] [[gamma]]) }}
 | id notin dom ( gamma )   :: M :: notin_ctx
   {{ tex [[id]] [[notin]] \mathsf{dom}([[gamma]]) }}
   {{ coq ([[notin]] [[id]] [[gamma]]) }}

terminals :: terminals_ ::=
  | ->				::   ::	rarrow					{{ tex \rightarrow }}
  | |-				::   :: vdash					{{ tex \vdash }}
  | ~				::   :: lneg  					{{ tex \neg }}
  | <-				::   :: larrow					{{ tex \leftarrow }}
  | |->				::   :: mapsto					{{ tex \mapsto }}
  | lambda			::   :: lambda					{{ tex \lambda }}
  | ~>				::   :: leadsto					{{ tex \leadsto }}
  | ~>*				::   :: mleadsto					{{ tex \leadsto^{*} }}
  | <>              ::   :: neq                     {{ tex \neq }}
  | >>              ::   :: lsr                     {{ tex \gg}}
  | ~>>             ::   :: asr                     {{ tex \ggg}}
  | <<              ::   :: lsl                     {{ tex \ll}}
  | isin        :: :: in {{ tex \in }}
  | notin     :: :: notin {{ tex \notin }}


subrules
  val <:: exp

defns typing_gamma :: '' ::=
 defn G is ok :: :: typ_gamma :: tg_ by

 --------- :: nil
 [] is ok

 id notin dom(G)
 G is ok
 --------------- :: cons
 (G, id:t) is ok

defns typing_exp :: '' ::=
 defn G |- exp '::' type :: :: type_exp :: t_ by

 id:t isin G
 G is ok
 ----------------- :: var
 G |- id:t :: t

 G is ok
 ----------------- :: int
 G |- num:sz :: imm<sz>

 G |- e1 :: mem<nat,sz>
 G |- e2 :: imm<nat>
 -------------------------- :: load
 G |- e1 [e2, ed] : sz :: imm<sz>


 G |- e1 :: mem<nat,sz>
 G |- e2 :: imm<nat>
 G |- e3 :: imm<sz>
 --------------------------------------------- :: store
 G |- e1 with [e2, ed]:sz <- e3 :: mem<nat,sz>


 G |- e1 :: imm<sz>
 G |- e2 :: imm<sz>
 --------------------------------- :: bop
 G |- e1 bop e2 :: imm<sz>

 G |- e1 :: imm<sz>
 G |- e2 :: imm<nat>
 --------------------------------- :: sop
 G |- e1 sop e2 :: imm<sz>

 G |- e1 :: imm<sz>
 G |- e2 :: imm<sz>
 --------------------------------- :: cop
 G |- e1 cop e2 :: imm<1>

 G |- e1 :: imm<sz>
 ---------------------------------- :: uop
 G |- uop e1 :: imm<sz>


 G |- e :: imm<nat>
 --------------------- :: cast
 G |- cast:sz[e] :: imm<sz>


 G |- e1  :: t
 G, id:t |- e2  :: t'
 ------------------------ :: let
 G |- let id:t = e1 in e2 :: t'

 G is ok
 ------------------------- :: unknown
 G |- unknown[str]:t :: t


 G |- e1 :: imm<1>
 G |- e2 :: t
 G |- e3 :: t
 -------------------------- :: ite
 G |- if e1 then e2 else e3 :: t

 G |- e :: imm<sz>
 sz1 >= sz2
 ---------------------------------- :: extract
 G |- extract:sz1:sz2[e] :: imm<(sz1-sz2)+1>


 G |- e1 :: imm<sz1>
 G |- e2 :: imm<sz2>
 ---------------------------------- :: concat
 G |- e1 @ e2 :: imm<sz1+sz2>

defns typing_stmt :: '' ::=

 defn G |- bil is ok :: :: type_seq :: t_ by

 G |- stmt is ok
 ------------------------------ :: seq_one
 G |- {stmt} is ok

 G |- s1 is ok
 G |- {s2; ..; sn} is ok
 ------------------------------ :: seq_rec
 G |- {s1; s2; ..; sn} is ok


 defn G |- stmt is ok :: :: type_stmt :: t_ by


 G |- var :: t
 G |- exp :: t
 --------------------------- :: move
 G |- var := exp is ok


 G |- exp :: imm<nat>
 --------------------------- :: jmp
 G |- jmp exp is ok

 G is ok
 --------------------------- :: cpuexn
 G |- cpuexn(num) is ok

 G is ok
 ---------------------------- :: special
 G |- special(str) is ok


 G |- e :: imm<1>
 G |- seq is ok
 ---------------------------- :: while
 G |- while (e) seq is ok


 G |- e :: imm<1>
 G |- seq is ok
 ---------------------------- :: ifthen
 G |- if (e) seq is ok


 G |- e :: imm<1>
 G |- seq1 is ok
 G |- seq2 is ok
 ---------------------------- :: if
 G |- if (e) seq1 else seq2 is ok



defns program :: '' ::=


 defn delta , w , var ~> delta' , w' , var' :: :: step :: '' by

 delta,w,var |-> {addr=w1; size=w2; code=bil}
 delta, w1.+w2 |- bil ~> delta',w3,{}
 ---------------------------------------------------------- :: step
 delta,w,var  ~> delta',w3,var


 defn delta,w,var |-> insn :: :: decode :: '' by

 -------------------------------------------------- :: decode
 delta,w,var |-> insn


defns helpers :: '' ::=
 defn succ w1 = exp :: :: succ :: '' by

 -------------------------------- :: succ
 succ num:sz = num:sz .+ 1:sz


defns reduce_exp :: '' ::=

 defn delta |- exp ~> exp' :: :: exp :: '' by

 (var,v) isin delta
------------------ :: var_in
 delta |- var ~> v


 id:type notin dom(delta)
 -------------------------------------------- :: var_unknown
 delta |- id:type ~> unknown[str]:type

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% LOAD                                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

 delta |- e2 ~> e2'
 ------------------------------------- :: load_step_addr
 delta |- e1[e2,ed]:sz ~> e1[e2',ed]:sz


 delta |- e1 ~> e1'
 ------------------------------------- :: load_step_mem
 delta |- e1[v2,ed]:sz ~> e1'[v2,ed]:sz


 ------------------------------------------------------ :: load_byte
 delta |- (v1 with [w,ed]:8 <- num:8)[w,ed']:8 ~> num:8

 ------------------------------------------------------------------------------ :: load_un_addr
 delta |- (v1 with [unknown[str]:t,ed]:8 <- v2)[v3,ed]:8 ~> unknown[str]:imm<8>

 w1 <> w2
 ---------------------------------------------------------- :: load_rec
 delta |- (v1 with [w1,ed]:8 <- v3)[w2,ed]:8 ~> v1[w2,ed]:8

 ---------------------------------------------------------- :: load_un_mem
 delta |- (unknown[str]:t)[v,ed]:sz ~> unknown[str]:imm<sz>

 succ w = w'
 --------------------------------------------------- :: load_word_be
 delta |- v[w,be]:sz ~> v[w,be]:8 @ (v[w', be]:(sz-8))

 succ w = w'
 --------------------------------------------------- :: load_word_el
 delta |- v[w,el]:sz ~> v[w',el]:(sz-8) @ (v[w,be]:8)




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STORE                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

 

 delta |- e3 ~> e3'
 ------------------------------------------------------------------------- :: store_step_val
 delta |- e1 with [e2,ed]:sz <- e3 ~> e1 with [e2,ed] : sz <- e3'


 delta |- e2 ~> e2'
 ------------------------------------------------------------------------- :: store_step_addr
 delta |- e1 with [e2,ed]:sz <- v3 ~> e1 with [e2',ed] : sz <- v3


 delta |- e1 ~> e1'
 ------------------------------------------------------------------------- :: store_step_mem
 delta |- e1 with [v2,ed]:sz <- v3 ~> e1' with [v2,ed] : sz <- v3

 succ w = w'
 e1 :=def (v with [w,be]:8 <- high:8[val])
 -------------------------------------------------------------------- :: store_word_be
 delta |- v with [w,be]:sz <- val ~> e1 with [w',be]:(sz-8) <- low:(sz-8)[val]

 succ w = w'
 e1 :=def (v with [w,el]:8 <- low:8[val])
 -------------------------------------------------------------------- :: store_word_el
 delta |- v with [w,el]:sz <- val ~> e1 with [w',el]:(sz-8) <- high:(sz-8)[val]


 delta |- e1 ~> e1'
 ------------------------------------------------ :: let_step
 delta |- let var = e1 in e2 ~> let var = e1' in e2


 ------------------------------------------------- :: let
 delta |- let var = v in e ~> [v/var]e


 delta |- e1 ~> e1'
 ------------------------------------------------------------------ :: ite_step
 delta |- if e1 then e2 else e3 ~> if e1' then e2 else e3

 ----------------------------------------------- :: ite_true
 delta |- if true then e2 else e3 ~> e2


 ------------------------------------------------ :: ite_false
 delta |- if false then e2 else e3 ~> e3


 delta |- e2 ~> e2'
 ------------------------------------------ :: bop_rhs
 delta |- e1 bop e2 ~> e1 bop e2'

 delta |- e1 ~> e1'
 ----------------------------------------- :: bop_lhs
 delta |- e1 bop v2 ~> e1' bop v2

 delta |- e2 ~> e2'
 ------------------------------------------ :: sop_rhs
 delta |- e1 sop e2 ~> e1 sop e2'

 delta |- e1 ~> e1'
 ----------------------------------------- :: sop_lhs
 delta |- e1 sop v2 ~> e1' sop v2

 delta |- e2 ~> e2'
 ------------------------------------------ :: cop_rhs
 delta |- e1 cop e2 ~> e1 cop e2'

 delta |- e1 ~> e1'
 ----------------------------------------- :: cop_lhs
 delta |- e1 cop v2 ~> e1' cop v2

 -------------------------------------------------------- :: bop_unk_rhs
 delta |- e bop unknown[str]:t ~> unknown[str]:t

 -------------------------------------------------------- :: bop_unk_lhs
 delta |- unknown[str]:t bop e ~> unknown[str]:t

 dom(delta) |- e :: t'
 -------------------------------------------------------- :: sop_unk_rhs
 delta |- e sop unknown[str]:t ~> unknown[str]:t'

 -------------------------------------------------------- :: sop_unk_lhs
 delta |- unknown[str]:t sop e ~> unknown[str]:t

 -------------------------------------------------------- :: cop_unk_rhs
 delta |- e cop unknown[str]:t ~> unknown[str]:imm<1>

 -------------------------------------------------------- :: cop_unk_lhs
 delta |- unknown[str]:t cop e ~> unknown[str]:imm<1>

 -------------------------------------- :: plus
 delta |- w1 + w2 ~> w1 .+ w2

 -------------------------------------- :: minus
 delta |- w1 - w2 ~> w1 .- w2


 ------------------------------------- :: times
 delta |- w1 * w2 ~> w1 .* w2


 ------------------------------------- :: div
 delta |- w1 / w2 ~> w1 ./ w2


 --------------------------------------- :: sdiv
 delta |- w1 /$ w2 ~> w1 ./$ w2


 ------------------------------------- :: mod
 delta |- w1 % w2 ~> w1 .% w2


 ---------------------------------------- :: smod
 delta |- w1 %$ w2 ~> w1 .%$ w2


 ----------------------------------------------- :: lsl
 delta |- w1 << w2 ~> w1 .<< w2

 ----------------------------------------------- :: lsr
 delta |- w1 >> w2 ~> w1 .>> w2

 ----------------------------------------------- :: asr
 delta |- w1 ~>> w2 ~> w1 .~>> w2


 ----------------------------------------------- :: land
 delta |- w1 & w2 ~> w1 .& w2

 ----------------------------------------------- :: lor
 delta |- w1 | w2 ~> w1 .| w2

 ----------------------------------------------- :: xor
 delta |- w1 xor w2 ~> w1 .xor w2


 ----------------------------------------------- :: eq
 delta |- w = w ~> true


 ----------------------------------------------- :: neq
 delta |- w <> w ~> false


 ----------------------------------------------- :: less
 delta |- w1 < w2 ~> w1 .< w2



 ----------------------------------------------- :: less_eq
 delta |- w1 <= w2 ~> (w1 < w2) | (w1 = w2)



 ----------------------------------------------- :: signed_less
 delta |- w1 <$ w2 ~> w1 .<$ w2


 ----------------------------------------------------- :: signed_less_eq
 delta |- w1 <=$ w2 ~> (w1 = w2) & (w1 <$ w2)

 delta |- e ~> e'
 ---------------------------------------- :: uop
 delta |- uop e ~> uop e'

 ---------------------------------------- :: not_true
 delta |- ~true ~> false


 ---------------------------------------- :: not_false
 delta |- ~false ~> true


 delta |- e2 ~> e2'
 ---------------------------------------- :: concat_rhs
 delta |- e1 @ e2 ~> e1 @ e2'


 delta |- e1 ~> e1'
 ---------------------------------------- :: concat_lhs
 delta |- e1 @ v2 ~> e1' @ v2

 ---------------------------------------------- :: concat_lhs_un
 delta |- unknown[str]:t @ v2 ~> unknown[str]:t

 ---------------------------------------------- :: concat_rhs_un
 delta |- v1 @ unknown[str]:t ~> unknown[str]:t

 ---------------------------------------- :: concat
 delta |- w1 @ w2 ~> w1 .@ w2

 delta |- e ~> e'
 ------------------------------------------------- :: extract_reduce
 delta |- extract:sz1:sz2[e] ~> extract:sz1:sz2[e']


 ---------------------------------------------------------- :: extract_un
 delta |- extract:sz1:sz2[unknown[str]:t] ~> unknown[str]:t

 ------------------------------------------------------ :: extract
 delta |- extract:sz1:sz2[w] ~> ext w ~hi:sz1 ~lo:sz2

 delta |- e ~> e'
 --------------------------------- :: cast_reduce
 delta |- cast:sz[e] ~> cast:sz[e']


 -------------------------------------------- :: cast_low
 delta |- low:sz[w] ~> ext w ~hi:(sz-1) ~lo:0


 ----------------------------------------------------------- :: cast_high
 delta |- high:sz[num:sz'] ~> ext num:sz' ~hi:sz' ~lo:(sz'-sz)


 -------------------------------------------- :: cast_signed
 delta |- signed:sz[w] ~> exts w ~hi:(sz-1) ~lo:0

 -------------------------------------------- :: cast_unsigned
 delta |- unsigned:sz[w] ~> low:sz[w]


defns reduce_stmt :: '' ::=

 defn delta , word |- stmt ~> delta' , word' :: :: stmt :: '' by


 delta |- e ~>* v
 ----------------------------------------- :: move
 delta,w |- var := e ~> delta[var <- v], w


 delta |- e ~>* w'
 ---------------------------------- :: jmp
 delta,w |- jmp e ~> delta, w'


 ------------------------------------ :: cpuexn
 delta,w |- cpuexn(num) ~> delta,w


 ------------------------------------ :: special
 delta,w |- special(str) ~> delta,w


 delta |- e ~>* true
 delta,word |- seq ~> delta',word',{}
 ------------------------------------- :: ifthen_true
 delta,word |- if (e) seq ~> delta', word'

 delta |- e ~>* true
 delta,word |- seq ~> delta',word',{}
 ------------------------------------- :: if_true
 delta,word |- if (e) seq else seq1 ~> delta', word'

 delta |- e ~>* false
 delta,word |- seq ~> delta',word',{}
 ------------------------------------- :: if_false
 delta,word |- if (e) seq1 else seq ~> delta', word'


 delta1 |- e ~>* true
 delta1,word1 |- seq ~> delta2,word2,{}
 delta2,word2 |- while (e) seq ~> delta3,word3
 --------------------------------------------- :: while
 delta1,word1 |- while (e) seq ~> delta3,word3

 delta |- e ~>* false
 ----------------------------------------- :: while_false
 delta,word |- while (e) seq ~> delta,word



 defn delta , word |- seq ~> delta' , word' , seq' :: :: seq :: '' by

 delta,word |- s1 ~> delta',word'
 ------------------------------------------------------------- :: seq_rec
 delta,word |- {s1; s2; ..; sn} ~> delta', word', {s2; ..; sn}

 delta,word |- s1 ~> delta',word'
 ------------------------------------------------------------- :: seq_last
 delta,word |- {s1; s2} ~> delta', word', {s2}

 delta,word |- s1 ~> delta',word'
 ------------------------------------------------------------- :: seq_one
 delta,word |- {s1} ~> delta', word', {}


 ------------------------------------------------------------- :: seq_nil
 delta,word |- {} ~> delta, word, {}
 
defns multistep_exp :: '' ::=

 defn delta |- exp ~>* exp' :: :: mexp :: '' by

 ---------------- :: refl
 delta |- e ~>*  e

 delta |- e1 ~> e2
 delta |- e2 ~>* e3
 ------------------ :: reduce
 delta |- e1 ~>* e3
